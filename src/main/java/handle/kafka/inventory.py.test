#!/usr/bin/env python
import argparse
import json


def ansible_inventory():
    hostvars = {
            "172.31.31.47": { "instance_id": "i-016b7ef3be37db55a" },
                    "172.31.26.202": { "instance_id": "i-0d701047e626d81c3" },
                    "172.31.21.60": { "instance_id": "i-0f6048d33260980f2" },
                }

    cluster = [
          "172.31.31.47",
                "172.31.26.202",
                "172.31.21.60",
            ]
      
    cluster_instance_id = [
          "i-016b7ef3be37db55a",
                  "i-0d701047e626d81c3",
                  "i-0f6048d33260980f2",
              ]
      
    cluster_security_ip = [
          "172.31.31.47/32",
                "172.31.26.202/32",
                "172.31.21.60/32",
            ]
      

    # Use python list slicing to define the hosts.
    # cluster[1:2] gives a list with one element, since slicing
    # is exclusive of the last index (e.g., [1:2] == [1])
    SERVICE_MAP = {
            "_meta" : {
                   "hostvars" : hostvars
            },
            
            # all nodes in the cluster
            "cluster": cluster,
            
            # service on the master nodes
            "kafka_node1": cluster[0:1],
            "kafka_node2": cluster[1:2],
            "kafka_node3": cluster[2:3],
            "cluster_instance_id": cluster_instance_id,
            "cluster_security_ip": cluster_security_ip
        }

    return SERVICE_MAP


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--list", action="store_true", help="display inventory")
    parser.add_argument("--host", action="store_true", help="host vars")

    args = parser.parse_args()
    if args.host:
        print json.dumps(dict())
    else:
        inventory = ansible_inventory()
        print json.dumps(inventory, indent=2, sort_keys=True)

if __name__ == "__main__": main()
